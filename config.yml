variables: secretfile.yml

web_server:
  bind: 0.0.0.0 # IP V4
  port: 58080
  web_ui: yes

schedules:
  # Local torrents
  - tasks: 'local_download*'
    interval:
      minutes: 15

  # Run download tasks
  - tasks: 'download*'
    interval:
      minutes: 30


  # Update movie queues
  - tasks: [queue_watchlist_movies, queue_kids_movies]
    interval:
      hours: 2

  # Maintainence
  - tasks: 'maintenance_clear_torrents'
    interval:
      hours: 1

  - tasks: 'maintenance_movie_queue'
    interval:
      days: 7

  # Sort Files
  - tasks: [sorting*]
    interval:
      minutes: 30

templates:
  global:
    #~ email:
      #~ template: html
      #~ from: '{? gmail.from ?}'
      #~ to: '{? gmail.to ?}'
      #~ smtp_username : '{? gmail.smtp_username ?}'
      #~ smtp_password : '{? gmail.smtp_password ?}'
      #~ smtp_host: smtp.gmail.com
      #~ smtp_port: 587
      #~ smtp_tls: yes

    transmission:
      host: '{? transmission.host ?}'
      port: 21772
      username: '{? transmission.username ?}'
      password: '{? transmission.password ?}'
      ratio: 1
      main_file_only: yes
      skip_files:
        - '*.nfo'
        - '*.sfv'
        - '*[sS]ample*'
        - '*.txt'
      include_subs: yes

    free_space:
      path: '{? roots.torrents ?}'
      space: 20000

    pathscrub: windows

    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}                    # Block any subbed/dubbed/etc videos
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title} # Block series, only accept one at a time
        - \b3-?D\b: {from: title}                             # I don't have any 3D displays
        - \btrailer\b: {from: title}                          # I've gotten a few trailers that matched as movies. VERY annoying
        - \bR5\b: {from: title}                               # The following are poor quality types that somehow got through the quality
        - \bWEBSCR\b: {from: title}                           # features usually due to the title including a keyword like "720p" as well
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title}
        - '{C_P}': {from: title}                              # The following are groups with poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
        - \bASAP\b: {from: title}

    torrent_alive:
      min_seeds: 10
      reject_for: 1 day

    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
        - '*.mpeg'

      reject:
        - 'password.txt'
        - '*.wmv'
        - '*.r0*'
        - '*.part0*'

      require_mainfile: yes

    domain_delay:
      bt-chat.com: 5 seconds
      torrentz.eu: 10 seconds

    # The Pirate Bay ssl certs always fail
    verify_ssl_certificates: no

    # Need to reject magnets in order for content filtering to work
    magnets: no

################################################################################
#
# Global Settings
#
################################################################################
  template_tv_global:
    include: [ input/tv_input.yml ]

    # Impose reasonable size constraints
    content_size:
      max: 5000
      min: 20

    # Prevent from downloading shows that were aquired manually
    exists_series:
      - '{? roots.media ?}/{? directories.tv_shows ?}'
      - '{? roots.media ?}/{? directories.kids_tv ?}'

    # Look up info on TheTVDB.com to fill in extra info
    thetvdb_lookup: yes

  template_tv:
    set:
      path: '{? roots.whatbox ?}/{? directories.tv_shows ?}/{{ series_name }}/'
      content_filename: '{{ series_name }} - {{ series_season|pad(2) }}x{{ series_episode|pad(2) }}'
      queuetotop: no

  template_kids_tv:
    set:
      path: '{? roots.whatbox ?}/{? directories.kids_tv ?}/{{ series_name }}/'
      content_filename: '{{ series_name }} - {{ series_season|pad(2) }}x{{ series_episode|pad(2) }}'
      queuetotop: no

  template_movies_global:
    interval: 1 hour
    imdb_lookup: yes
    
    include: [ input/movie_input.yml ]

    # Some feeds might include TV Shows, ignore them
    regexp:
      reject:
        - s\d+e\d+: {from: title}
        - '\d{4}.\d{2}.\d{2}': {from: title}
        - \d+x\d+: {from: title}
        - \baac2: {from: title} # No 2 channel audio

    # Impose reasonable size constraints
    content_size:
      max: 6000
      min: 700

    seen_movies: strict # Don't download movies we've already seen

    # Check for already downloaded or currently downloading movies
    exists_movie:
      - '{? roots.media ?}/{? directories.kids_movies ?}'
      - '{? roots.media ?}/{? directories.movies ?}'

  template_movies:
    discover:
      what:
        - movie_list: Movies
      from:
        - rarbg: 
            category:
              - x264 720p
              - x264 1080p
        - piratebay:
            category: movies

    list_match:
      from:
        - movie_list: Movies
      action: accept
      remove_on_match: yes

    set:
      path: '{? roots.whatbox ?}/{? directories.movies ?}/{{imdb_name}} ({{imdb_year}})/'
      content_filename: '{{ movie_name }} {{movie_year}}'
      queuetotop: no

    list_remove:
      - trakt_list:
          account: '{? trakt.account ?}'
          list: '{? trakt.watchlist ?}'

  template_kids_movies:
    discover:
      what:
        - movie_list: Kids
      from:
        - rarbg: 
            category:
              - x264 720p
              - x264 1080p
        - piratebay:
            category: movies

    list_match:
      from:
        - movie_list: Kids 
      action: accept
      remove_on_match: yes

    quality: hdtv+ xvid+

    set:
      path: '{? roots.whatbox ?}/{? directories.kids_movies ?}/{{imdb_name}} ({{imdb_year}})/'
      content_filename: '{{ movie_name }} {{movie_year}}'
      queuetotop: no

    list_remove:
      - trakt_list:
          account: '{? trakt.account ?}'
          list: '{? trakt.kids ?}'

################################################################################
#
# Settings for finding new series premieres
#
################################################################################
  template_tv_premieres:
    # The entry has to have the tvdb_genres field so I can filter by it
    require_field:
      - tvdb_genres
      - tvdb_first_air_date
    # Make sure plenty of people are seeding it, otherwise it may not be that good
    torrent_alive:
      min_seeds: 50
    # Block these genres if they exist in the list of tvdb_genres at all
    regexp:
      reject:
        - talk show: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
        - documentary: {from: tvdb_genres}
        - travel: {from: tvdb_genres}
    if:
      # Block show if genres contains only 'Drama'
      - "tvdb_genres == ['Drama']": reject
      # Block premieres that weren't within the last 60 days
      - tvdb_first_air_date != None and tvdb_first_air_date < now - timedelta(days=60): reject

    # Accept all series premieres
    series_premiere:
      timeframe: 1 days
      quality: 720p+ hdtv+ <=h264


  # Global settings for local torrent downloads
  template_local_torrents:
    disable:
      - seen
      - seen_info_hash
      - inputs
      - exists_series
      - regexp
      - content_size
      - torrent_alive

    plugin_priority:
      exec: 0

    exec:
      on_output:
        for_accepted: rm '{{location}}'
    accept_all: yes
    no_entries_ok: yes


tasks:
################################################################################
#
# TV Tasks
#
################################################################################

  #-----------------------------------------------------------------------------
  # Find new TV premieres
  #-----------------------------------------------------------------------------
  download_tv_premieres:
    priority: 40
    seen: local

    parsing:
      series: internal
    template:
      - template_tv_global
      - template_tv_premieres
      - template_tv

  #-----------------------------------------------------------------------------
  # Track existing TV shows and New Shows from trakt.tv
  #-----------------------------------------------------------------------------
  download_tv:
    priority: 50
    seen: local

    parsing:
      series: internal
    template:
      - template_tv_global
      - template_tv

    configure_series:
      settings:
        target: 720p+ hdtv+ <=h264
        quality: webrip+
        identified_by: ep
        tracking: backfill
      from:
        trakt_list:
          account: '{? trakt.account ?}'
          list: '{? trakt.watchlist ?}'
          type: shows
        filesystem:
          retrieve: dirs
          recursive: False
          path:
            - '{? roots.media ?}/{? directories.tv_shows ?}'

  #-----------------------------------------------------------------------------
  # Track existing Kids TV shows
  #-----------------------------------------------------------------------------
  download_kids_tv:
    priority: 60
    seen: local

    parsing:
      series: internal
    template:
      - template_tv_global
      - template_kids_tv

    configure_series:
      settings:
        target: hdtv+
        quality: webrip+ <=h264
        identified_by: ep
      from:
        trakt_list:
          account: '{? trakt.account ?}'
          list: '{? trakt.kids ?}'
          type: shows
        filesystem:
          retrieve: dirs
          recursive: False
          path:
            - '{? roots.media ?}/{? directories.kids_tv ?}'

################################################################################
#
# Movie Tasks
#
################################################################################
  queue_watchlist_movies:
    priority: 101
    template: no_global

    trakt_list:
      account: '{? trakt.account ?}'
      list: '{? trakt.watchlist ?}'
      type: movies

    accept_all: yes
    list_add:
      - movie_list: Movies

  queue_kids_movies:
    priority: 102
    template: no_global

    trakt_list:
      account: '{? trakt.account ?}'
      list: '{? trakt.kids ?}'
      type: movies

    accept_all: yes
    list_add:
      - movie_list: Kids

  #-----------------------------------------------------------------------------
  # Main movie download task
  #-----------------------------------------------------------------------------
  download_movies_1080p:
    priority: 110
    template:
      - template_movies_global
      - template_movies
    quality: 1080p+ bluray+ <=h264

  # Delay sets a window to allow for higher resolution videos
  download_movies_720p:
    priority: 120
    template:
      - template_movies_global
      - template_movies
    quality: 720p+ webdl+ xvid+

    delay: 2 days

  download_kids_movies:
    priority: 120
    template:
      - template_movies_global
      - template_kids_movies
    quality: hdtv+ xvid+


################################################################################
#
# Local torrent file downloads
#
################################################################################
  local_download_tv:
    priority: 1
    template:
      - template_tv_global
      - template_local_torrents
    filesystem: '{? roots.torrents ?}/{? directories.tv_shows ?}'
    set:
      path: '{? roots.whatbox ?}/{? directories.tv_shows ?}'
      content_filename: '{{ series_name }} - {{ series_season|pad(2) }}x{{ series_episode|pad(2) }}'

    all_series:
      parse_only: yes

  # Same as above but for movies
  local_download_movies:
    priority: 2
    template:
      - template_movies_global
      - template_local_torrents

    filesystem: '{? roots.torrents ?}/{? directories.movies ?}'
    set:
      path: '{? roots.whatbox ?}/{? directories.movies ?}'

  local_download_kids_tv:
    priority: 3
    template:
      - template_tv_global
      - template_local_torrents

    filesystem: '{? roots.torrents ?}/{? directories.kids_tv ?}'
    set:
      path: '{? roots.whatbox ?}/{? directories.kids_tv ?}'
      content_filename: '{{ series_name }} - {{ series_season|pad(2) }}x{{ series_episode|pad(2) }}'

    all_series:
      parse_only: yes

  local_download_kids_movies:
    priority: 4
    template:
      - template_movies_global
      - template_local_torrents

    filesystem: '{? roots.torrents ?}/{? directories.kids_movies ?}'
    set:
      path: '{? roots.whatbox ?}/{? directories.kids_movies ?}'

################################################################################
#
# File sorting
#
################################################################################

  sorting_tv:
    no_entries_ok: yes
    disable: seen
    template: no_global
    imdb_lookup: yes
    thetvdb_lookup: yes
    filesystem:
      path: '{? roots.downloads ?}/{? directories.tv_shows ?}'
      regexp: '.*\.(mkv|mp4|avi|mpg|mpeg)$'
      recursive: yes

    configure_series:
      from:
        filesystem:
          - '{? roots.downloads ?}/{? directories.tv_shows ?}'
      settings:
        parse_only: yes
    regexp:
      reject:
        - sample
    require_field: series_name
    accept_all: yes
    move:
      to: '{? roots.media ?}/{? directories.tv_shows ?}/{{ series_name }}/Season {{series_season}}/'
      rename: '{{ series_name }} - {{ series_season|pad(2) }}x{{ series_episode|pad(2) }}'
    exec:
      allow_background: yes
      auto_escape: yes
      on_exit:
        phase: "/bin/find '{? roots.downloads ?}/{? directories.tv_shows ?}' -type f -size -100M"
        #phase: "/bin/rm -rf {? roots.downloads ?}/{? directories.tv_shows ?}/*"

  sorting_kids_tv:
    no_entries_ok: yes
    disable: seen
    template: no_global
    imdb_lookup: yes
    filesystem:
      path: '{? roots.downloads ?}/{? directories.kids_tv ?}'
      regexp: '.*\.(mkv|mp4|avi|mpg|mpeg)$'
      recursive: yes
    configure_series:
      from:
        filesystem:
          - '{? roots.media ?}/{? directories.kids_tv ?}'
      settings:
        parse_only: yes
    regexp:
      reject:
        - sample
    require_field: series_name
    accept_all: yes
    move:
      to: '{? roots.media ?}/{? directories.kids_tv ?}/{{ series_name }}/Season {{series_season}}/'
      rename: '{{ series_name }} - {{ series_season|pad(2) }}x{{ series_episode|pad(2) }}'
    exec:
      allow_background: yes
      auto_escape: yes
      on_exit:
        phase: "/bin/find '{? roots.downloads ?}/{? directories.kids_tv ?}' -type f -size -100M"
        #phase: "/bin/rm -rf {? roots.downloads ?}/{? directories.kids_tv ?}/*"

  sorting_movies:
    no_entries_ok: yes
    disable: seen
    template: no_global
    imdb_lookup: yes
    filesystem:
      path: '{? roots.downloads ?}/{? directories.movies ?}'
      regexp: '.*\.(mkv|mp4|avi|mpg|mpeg)$'
      recursive: yes
    require_field: imdb_name
    accept_all: yes
    move:
      to: '{? roots.media ?}/{? directories.movies ?}/{{imdb_name}} ({{imdb_year}})'
      rename: '{{imdb_name}} ({{imdb_year}})'
      clean_source: 300
    exec:
      allow_background: yes
      auto_escape: yes
      on_exit:
        phase: "/bin/find '{? roots.downloads ?}/{? directories.movies ?}' -type f -size -100M"

  sorting_kids_movies:
    no_entries_ok: yes
    disable: seen
    template: no_global
    imdb_lookup: yes
    filesystem:
      path: '{? roots.downloads ?}/{? directories.kids_movies ?}'
      regexp: '.*\.(mkv|mp4|avi|mpg|mpeg)$'
      recursive: yes
    require_field: imdb_name
    accept_all: yes
    move:
      to: '{? roots.media ?}/{? kids_movies ?}/{{imdb_name}} ({{imdb_year}})'
      rename: '{{imdb_name}} ({{imdb_year}})'
      clean_source: 300
    exec:
      allow_background: yes
      auto_escape: yes
      on_exit:
        phase: "/bin/find '{? roots.downloads ?}/{? directories.kids_movies ?}' -type f -size -100M"

################################################################################
#
# Maintainence Tasks
#
################################################################################
  maintenance_movie_queue:
    template: no_global
    disable:
      - seen
      - seen_info_hash
      - seen_movies
    accept_all: yes
    filesystem:
      - '{? roots.downloads ?}/{? directories.movies ?}'
      - '{? roots.downloads ?}/{? directories.kids_movies ?}'

    imdb_lookup: yes
    require_field: [movie_name, movie_year]

    list_remove:
      - trakt_list:
          account: '{? trakt.account ?}'
          list: '{? trakt.watchlist ?}'
      - movie_list: Movies

  maintenance_clear_torrents:
    clean_transmission:
      host: '{? transmission.host ?}'
      port: 21772
      username: '{? transmission.username ?}'
      password: '{? transmission.password ?}'
      finished_for: 1 hours
      delete_files: no

    disable: details

  maintenance_seed_series_db:
    template: no_global
    #disable: builtins
    thetvdb_lookup: yes
    trakt_lookup: yes
    configure_series:
      from:
        filesystem:
          - '{? roots.media ?}/{? directories.tv_shows ?}'
          - '{? roots.media ?}/{? directories.kids_tv ?}'
      settings:
        identified_by: ep

    # The filesystem plugin will find all of your existing episodes
    filesystem:
      regexp: .*(mkv|mp4|avi|mpg|mpeg)$
      path:
        - '{? roots.media ?}/{? directories.tv_shows ?}'
        - '{? roots.media ?}/{? directories.kids_tv ?}'
      recursive: yes
    # We use the manual plugin so that this task only runs when explicitly called
    manual: yes
